---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.opi.namespace }}

# Deployment
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: "eirini"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: "eirini"
  template:
    metadata:
      labels:
        name: "eirini"
        deployment_version: {{ .Values.opi.version }}
    spec:
      dnsPolicy: "ClusterFirst"
      serviceAccountName: "opi"
      volumes:
        - name: config-map-volume
          configMap:
            name: "eirini"
            items:
            - key: opi.yaml
              path: opi.yml
        - name: config-volume
          emptyDir: {}
        - name: cf-secrets
          secret:
            secretName: secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}
            items:
            - key: doppler-cert
              path: doppler.crt
            - key: doppler-cert-key
              path: doppler.key
            - key: internal-ca-cert
              path: doppler.ca
            - key: cc-server-crt
              path: cc.crt
            - key: cc-server-crt-key
              path: cc.key
            - key: internal-ca-cert
              path: cc.ca
      initContainers:
      - name: configure-opi-yaml
        image: eirini/opi-init:{{ .Values.opi.image_tag }}
        volumeMounts:
        - name: config-map-volume
          mountPath: /configs
        - name: config-volume
          mountPath: /output
          readOnly: false
      containers:
      - name: opi
        image: eirini/opi:{{ .Values.opi.image_tag }}
        imagePullPolicy: Always
        volumeMounts:
        - name: config-volume
          mountPath: /workspace/jobs/opi/config
        - name: cf-secrets
          mountPath: /workspace/jobs/opi/secrets
        ports:
        - containerPort: 8085

# ConfigMap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "eirini"
data:
  opi.yaml: |
    opi:
      kube_namespace: {{ .Values.opi.namespace }}
      nats_password: {{ .Values.secrets.NATS_PASSWORD }}
      nats_ip: "nats-nats.scf.svc.cluster.local"
      api_endpoint: "http://api.{{ .Release.Namespace }}.svc.cluster.local:9022"
      cc_internal_api: "https://api.{{ .Release.Namespace }}.svc.cluster.local:9023"
      cf_username: "admin"
      cc_certs_secret_name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
      cf_password: {{ .Values.secrets.CLUSTER_ADMIN_PASSWORD }}
      {{- if .Values.opi.use_registry_ingress }}
      registry_address: "registry.{{ .Values.opi.ingress_endpoint }}:443"
      {{- else if .Values.services.loadbalanced }}
      registry_address: "registry.{{ index .Values.env.DOMAIN }}:6666"
      {{- else }}
      registry_address: "registry.{{ index .Values.kube.external_ips 0 }}.nip.io:6666"
      {{- end }}
      eirini_address: "http://eirini-opi.{{ .Release.Namespace }}.svc.cluster.local:8085"
      stager_image_tag: {{ .Values.opi.image_tag }}
      metrics_source_address: "http://heapster.kube-system.svc.cluster.local/apis/metrics/v1alpha1"
      loggregator_address: "doppler-doppler-set.{{ .Release.Namespace }}.svc.cluster.local:8082"
      loggergator_cert_path: "/workspace/jobs/opi/secrets/doppler.crt"
      loggregator_key_path: "/workspace/jobs/opi/secrets/doppler.key"
      loggregator_ca_path: "/workspace/jobs/opi/secrets/doppler.ca"
      cc_cert_path: "/workspace/jobs/opi/secrets/cc.crt"
      cc_key_path: "/workspace/jobs/opi/secrets/cc.key"
      cc_ca_path: "/workspace/jobs/opi/secrets/cc.ca"

# Service
---
apiVersion: v1
kind: Service
metadata:
  name: "eirini-opi"
spec:
{{- if not .Values.opi.use_registry_ingress }}
  externalIPs: {{ .Values.kube.external_ips | toJson }}
{{- end }}
  ports:
    - port: 8085
      protocol: TCP
      name: opi
  selector:
    name: "eirini"


# Service Account
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opi
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: opi-clust-admin-binding
subjects:
  - kind: ServiceAccount
    name: opi
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

# create-certs
---
kind: Job
apiVersion: batch/v1
metadata:
  name: create-certs
spec:
  template:
    metadata:
      name: create-certs
    spec:
      serviceAccountName: "opi"
      restartPolicy: OnFailure
      containers:
      - name: create-certs
        env:
        - name: REGISTRY
          {{- if .Values.opi.use_registry_ingress }}
          value: "registry.{{ .Values.opi.ingress_endpoint }}"
          {{- else if .Values.services.loadbalanced }}
          value: "registry.{{ index .Values.env.DOMAIN }}"
          {{- else }}
          value: "registry.{{ index .Values.kube.external_ips 0 }}.nip.io"
          {{- end }}
        image: eirini/certs-generate:{{ .Values.opi.image_tag }}
        imagePullPolicy: Always

# copy-certs
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cert-copier
spec:
  selector:
    matchLabels:
      name: "cert-copier"
  template:
    metadata:
      labels:
        name: "cert-copier"
    spec:
      serviceAccountName: "opi"
      volumes:
      - name: host-docker
        hostPath:
          path: /etc/docker
          type: Directory
      containers:
      - name: copy-certs
        env:
        - name: REGISTRY
          {{- if .Values.opi.use_registry_ingress }}
          value: "registry.{{ .Values.opi.ingress_endpoint }}:443"
          {{- else if .Values.services.loadbalanced }}
          value: "registry.{{ index .Values.env.DOMAIN }}:6666"
          {{- else }}
          value: "registry.{{ index .Values.kube.external_ips 0 }}.nip.io:6666"
          {{- end }}
        image: eirini/certs-copy:{{ .Values.opi.image_tag }}
        volumeMounts:
        - name: host-docker
          mountPath: /workspace/docker

---
apiVersion: batch/v1
kind: Job
metadata:
  name: secret-smuggler
spec:
  template:
    spec:
      serviceAccountName: "opi"
      restartPolicy: OnFailure
      containers:
      - name: smuggle
        image: eirini/secret-smuggler:{{ .Values.opi.image_tag }}
        env:
        - name: SECRET_NAME
          value: secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}
        - name: UAA_NAMESPACE
          value: uaa
        - name: SCF_NAMESPACE
          value: {{ .Release.Namespace }}
        - name: OPI_NAMESPACE
          value: {{ .Values.opi.namespace }}

---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: loggregator-fluentd
spec:
  selector:
    matchLabels:
      name: loggregator-fluentd
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: loggregator-fluentd
    spec:
      serviceAccountName: "opi"
      containers:
      - name: loggregator-fluentd
        image: eirini/loggregator-fluentd
        imagePullPolicy: Always
        env:
        - name: FLUENT_UID
          value: "0"
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: vardata
          mountPath: /var/data
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varvcapstore
          mountPath: /var/vcap/store
          readOnly: true
        - name: varvcapdata
          mountPath: /var/vcap/data
          readOnly: true
        - name: loggregator-tls-certs
          mountPath: /fluentd/certs
          readOnly: true
      - name: loggregator-agent
        image: loggregator/agent
        imagePullPolicy: Always
        env:
        - name: AGENT_METRIC_SOURCE_ID
          value: scf/daemonset/loggregator-fluentd
        - name: ROUTER_ADDR
          value: doppler-doppler.scf.svc.cluster.local:8082
        - name: ROUTER_ADDR_WITH_AZ
          value: doppler-doppler.scf.svc.cluster.local:8082
        - name: AGENT_PPROF_PORT
          value: "6062"
        - name: AGENT_HEALTH_ENDPOINT_PORT
          value: "6063"
        ports:
        - name: health
          containerPort: 6063
        volumeMounts:
        - name: loggregator-tls-certs
          mountPath: /srv/certs
          readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vardata
        hostPath:
          path: /var/data
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varvcapstore
        hostPath:
          path: /var/vcap/store/
      - name: varvcapdata
        hostPath:
          path: /var/vcap/data/
      - name: loggregator-tls-certs
        secret:
          secretName: secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}
          items:
            - key: loggregator-agent-cert
              path: agent.crt
            - key: loggregator-agent-cert-key
              path: agent.key
            - key: internal-ca-cert
              path: ca.crt
