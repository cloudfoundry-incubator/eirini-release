api:
  # registry_secret_name is the name of the secret containing the docker
  # credentials to pull LRP images
  registry_secret_name: registry-credentials

  # unsafe_allow_automount_service_account_token when set to true causes
  # Kubernetes to mount the service account token in the LRP and task
  # containers. This gives the code running there access to the Kubernetes
  # API with the privileges of the application service account.
  #
  # This should generally be left as the default false unless there is a
  # good reason and the implications are understood. It is required when
  # running cf-for-k8s in a kind cluster, for example.
  unsafe_allow_automount_service_account_token: false

  # tls_port is the port used by Eirini to serve its REST API over HTTPS
  # Required when serve_plaintext is set to false or omitted.
  tls_port: 8085

  # plaintext_port is the port used by Eirini to serve its REST API over
  # plain HTTP.  Required when serve_plaintext is set to true.
  plaintext_port: 8080

  # serve_plaintext specifies whether the Eirini REST API should be served
  # over plain HTTP or not.
  #
  # When serve_plaintext is false, which is the default, a secret must be
  # provided for the eirini-certs volume in core/api-deployment.yml. This
  # must have entries tls.ca, tls.crt and tls.key, for the TLS certificate
  # authority, certificate and key respectively, used to serve TLS.
  serve_plaintext: true

  # The secret below is required when opi.cc_tls_disabled is false in
  # the core/api-configmap.yml. It must have keys tls.ca, tls.crt and
  # tls.key for the certificate authority, client certificate and
  # private key respectively, used for mTLS with the Cloud Controller.
  tls_secret_name: eirini-internal-tls-certs

tasks:
  # completion_callback_retry_limit is the number of times Eirini will retry
  # to call the Cloud Controller completion callback in case the Cloud
  # Controller is unreachable.
  completion_callback_retry_limit: 10

  # ttl_seconds is the number of seconds Eirini will wait before deleting the
  # Job associated to a completed Task.
  ttl_seconds: 5

workloads:
    # default_namespace is the namespace used by Eirini to deploy LRPs that do
    # not specify their own namespace in the request.
    default_namespace: cf-workloads

    namespaces: []
    create_namespaces: false

cc_api:
  # host is the host used by Eirini to call the Cloud Controller.
  host: "capi.cf-system.svc.cluster.local"

  # port is the port used by Eirini to call the Cloud Controller.
  port: 9023

  # scheme is the URL scheme used by Eirini to call the Cloud Controller.
  scheme: http

  # tls_disabled specifies wether Eirini should communicate to the Cloud
  # Controller via HTTPS or not. This should be set to false if TLS is handled
  # transparently, e.g. by a service mesh.
  #
  # When tls_disabled is false, which is the default, a secret must be provided
  # for the cc-certs volume via tls_secret_name. This must have entries tls.ca,
  # tls.crt and tls.key, for the TLS certificate authority, client certificate
  # and key respectively, used for mTLS with the Cloud Controller.
  tls_disabled: false

  # The secret below is required when opi.cc_tls_disabled is false in
  # the core/api-configmap.yml. It must have keys tls.ca, tls.crt and
  # tls.key for the certificate authority, client certificate and
  # private key respectively, used for mTLS with the Cloud Controller.
  tls_secret_name: eirini-internal-tls-certs

routing:
  nats:
    # host is the host used by Eirini to publish route updates via NATS.
    host: "nats-client.cf-system.svc.cluster.local"

    # port is the port used by Eirini to publish route updates via NATS.
    port: 4222

    # secret_name is the name of the k8s secret holding the NATS password
    secret_name: nats-secret

    # password_key is the name of the key containing the NATS password in the
    # above secret
    password_key: nats-password

metrics:
  loggregator:
    # host is the host used by Eirini to push metrics to loggregator
    host: "doppler.cf-system.svc.cluster.local"

    # port is the port used by Eirini to push metrics to loggregator
    port: 8082

images:
    api: eirini/opi@sha256:dd6cc372c9d86c0658adf4e8782a5f25954d8efc2b1172331ecbe8e62c03a5f6
    eirini_controller: eirini/eirini-controller@sha256:191636f313f23e10f1a722a73b83a476e3b7950468caddeed1fcc026a5d3cffb
    instance_index_env_injector: eirini/instance-index-env-injector@sha256:bce25c5b478f6e9aa1bde142cba0d9fbaab31c45df71db157c53e0ca62f9a0b3
    task_reporter: eirini/task-reporter@sha256:b45625dcf1c8001317dd7432a5c25680780aab20c939bd611ef6f9d55e184993
    event_reporter: eirini/event-reporter@sha256:d3fee693651c3d137d24d6b3bcc01b706fefc461562958da8853518235ae4eb2
    route_collector: eirini/route-collector@sha256:5806becbda036ad3e8d71c965ab3e3309b7f2a8359dbaf005977cbfcee1604cb
    route_pod_informer: eirini/route-pod-informer@sha256:2499006449fe0f7106c210da1d5565ba72ab126de290ed9723f66ab75ff2d34c
    route_statefulset_informer: eirini/route-statefulset-informer@sha256:087702ed3da9d8d518c9d0a0fac7e2a437d25fbbc0ab86dc0ed7aa880eaffeec
    metrics_collector: eirini/metrics-collector@sha256:f37ec4d070446ce4ee03519e78e26665d4779b8a295bab2e42a6b8c8e0ec96a5
